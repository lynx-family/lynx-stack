/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface TransformNodiffBundleOptions {
  filename: string
  pluginName: string
  sourceFileName?: string
  sourcemap: boolean | string
  extractStr: boolean | ExtractStrConfig
  minify?: boolean
}
export interface TransformNodiffBundleOutput {
  code: string
  map?: string
  selectStrVec?: Array<string>
  useWorklet?: boolean
  errors: Array<PartialMessage>
  warnings: Array<PartialMessage>
}
/**
 * This is esbuild's PartialMessage definition.
 * https://github.com/evanw/esbuild/blob/043ab306c490f692c68e8d254bbf00b6468be87d/lib/shared/types.ts#L421
 */
export interface PartialMessage {
  id?: string
  pluginName?: string
  text?: string
  location?: PartialLocation
  notes?: Array<PartialNote>
  detail?: string
}
export interface PartialNote {
  text?: string
  location?: PartialLocation
}
export interface PartialLocation {
  file?: string
  namespace?: string
  line?: number
  column?: number
  length?: number
  lineText?: string
  suggestion?: string
}
export interface DarkModeConfig {
  /** @public */
  themeExpr: string
}
export interface AddComponentElementConfig {
  /** @public */
  compilerOnly: boolean
}
export interface CompatVisitorConfig {
  /** @internal */
  target: 'LEPUS' | 'JS' | 'MIXED'
  /** @public */
  componentsPkg: Array<string>
  /** @public */
  oldRuntimePkg: Array<string>
  /** @public */
  newRuntimePkg: string
  /** @public */
  additionalComponentAttributes: Array<string>
  /** @public */
  addComponentElement: boolean | AddComponentElementConfig
  /**
   * @public
   * @deprecated
   */
  simplifyCtorLikeReactLynx2: boolean
  /**
   * @public
   * @deprecated
   */
  removeComponentAttrRegex?: string
  /** @public */
  disableDeprecatedWarning: boolean
  /**
   * @public
   * @deprecated
   */
  darkMode?: boolean | DarkModeConfig
}
export interface CssScopeVisitorConfig {
  /** @public */
  mode: 'all' | 'none' | 'modules'
  /** @public */
  filename: string
}
export interface DefineDceVisitorConfig {
  /** @public */
  define: Record<string, string>
}
export interface DirectiveDceVisitorConfig {
  /** @internal */
  target: 'LEPUS' | 'JS' | 'MIXED'
}
export interface DynamicImportVisitorConfig {
  /** @internal */
  runtimePkg: string
  /** @internal */
  layer: string
}
export interface ExtractStrConfig {
  /** @public */
  strLength: number
  /** @internal */
  extractedStrArr?: Array<string>
}
export interface InjectVisitorConfig {
  inject: Record<string, ['expr', string] | ['importDefault', string] | ['importStarAs', string] | ['importNamed', string, string]>
}
export interface RefreshVisitorConfig {
  library?: Array<string>
}
export interface ShakeVisitorConfig {
  /** @public */
  pkgName: Array<string>
  /** @public */
  retainProp: Array<string>
  /** @public */
  removeCallParams: Array<string>
}
export interface JsxTransformerConfig {
  preserveJsx: boolean
  runtimePkg: string
  jsxImportSource?: string
  filename: string
  /** @internal */
  target: 'LEPUS' | 'JS' | 'MIXED'
  /** @internal */
  isDynamicComponent?: boolean
}
export interface WorkletVisitorConfig {
  /**
   * @public
   * During the compilation of worklet, when extracting external variable identifiers,
   * global identifiers available in lepus context need to be ignored.
   * In addition to the default lepus global identifier list provided by the compiler,
   * users can customize the global identifier list through this option.
   * This configuration will take effect together with the default lepus global identifier list.
   */
  customGlobalIdentNames?: Array<string>
  /** @internal */
  filename: string
  /** @internal */
  target: 'LEPUS' | 'JS' | 'MIXED'
  runtimePkg: string
}
export interface TransformNodiffOptions {
  /**
   * @internal
   * This is used internally to make sure the test output is consistent.
   */
  mode?: 'production' | 'development' | 'test'
  pluginName: string
  filename: string
  sourceFileName?: string
  sourcemap: boolean | string
  sourceMapColumns?: boolean
  inlineSourcesContent?: boolean
  /**
   * @public
   * This is swc syntax config in JSON format
   */
  syntaxConfig?: string
  isModule?: boolean | 'unknown'
  cssScope: boolean | CssScopeVisitorConfig
  snapshot?: boolean | JsxTransformerConfig
  shake: boolean | ShakeVisitorConfig
  compat: boolean | CompatVisitorConfig
  refresh: boolean | RefreshVisitorConfig
  defineDCE: boolean | DefineDceVisitorConfig
  directiveDCE: boolean | DirectiveDceVisitorConfig
  worklet: boolean | WorkletVisitorConfig
  dynamicImport?: boolean | DynamicImportVisitorConfig
  /** @internal */
  inject?: boolean | InjectVisitorConfig
}
export interface TransformNodiffOutput {
  code: string
  map?: string
  errors: Array<PartialMessage>
  warnings: Array<PartialMessage>
}
export function transformReactLynxSync(code: string, options?: TransformNodiffOptions | undefined | null): TransformNodiffOutput
export function transformReactLynx(code: string, options?: TransformNodiffOptions | undefined | null): Promise<TransformNodiffOutput>
export function transformBundleResultSync(code: string, options?: TransformNodiffBundleOptions | undefined | null): TransformNodiffBundleOutput
export function transformBundleResult(code: string, options?: TransformNodiffBundleOptions | undefined | null): Promise<TransformNodiffBundleOutput>
